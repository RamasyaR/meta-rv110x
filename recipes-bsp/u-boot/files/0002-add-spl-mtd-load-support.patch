Upstream-Status: Inappropriate [embedded specific]
diff --git a/arch/arm/include/asm/spl.h b/arch/arm/include/asm/spl.h
index ee79a19c..cd9b7942 100644
--- a/arch/arm/include/asm/spl.h
+++ b/arch/arm/include/asm/spl.h
@@ -20,6 +20,7 @@ enum {
 	BOOT_DEVICE_NAND,
 	BOOT_DEVICE_ONENAND,
 	BOOT_DEVICE_NOR,
+	BOOT_DEVICE_SPINAND,
 	BOOT_DEVICE_UART,
 	BOOT_DEVICE_SPI,
 	BOOT_DEVICE_USB,
diff --git a/arch/arm/mach-rockchip/spl-boot-order.c b/arch/arm/mach-rockchip/spl-boot-order.c
index 3dce9b30..0bbf2c68 100644
--- a/arch/arm/mach-rockchip/spl-boot-order.c
+++ b/arch/arm/mach-rockchip/spl-boot-order.c
@@ -75,6 +75,9 @@ static int spl_node_to_boot_device(int node)
 	if (!uclass_get_device_by_of_offset(UCLASS_SPI_FLASH, node, &parent))
 		return BOOT_DEVICE_SPI;
 
+	if (!uclass_get_device_by_of_offset(UCLASS_MTD, node, &parent))
+		return BOOT_DEVICE_SPINAND;
+
 	return -1;
 }
 
@@ -168,7 +171,7 @@ int spl_decode_boot_device(u32 boot_device, char *buf, size_t buflen)
 #endif
 	int ret;
 
-	if (boot_device == BOOT_DEVICE_SPI) {
+	if (boot_device == BOOT_DEVICE_SPI || boot_device == BOOT_DEVICE_SPINAND) {
 		/* Revert spl_node_to_boot_device() logic to find appropriate SPI flash device */
 
 		/*
@@ -180,6 +183,7 @@ int spl_decode_boot_device(u32 boot_device, char *buf, size_t buflen)
 		int elem;
 		int node;
 		const char *conf;
+		enum uclass_id u_id;
 
 		if (chosen_node < 0) {
 			debug("%s: /chosen not found\n", __func__);
@@ -211,7 +215,18 @@ int spl_decode_boot_device(u32 boot_device, char *buf, size_t buflen)
 				continue;
 			}
 
-			ret = uclass_find_device_by_of_offset(UCLASS_SPI_FLASH, node, &dev);
+			switch (boot_device) {
+			case BOOT_DEVICE_SPI:
+				u_id = UCLASS_SPI_FLASH;
+				break;
+			case BOOT_DEVICE_SPINAND:
+				u_id = UCLASS_MTD;
+				break;
+			default:
+				return -ENODEV;
+			}
+
+			ret = uclass_find_device_by_of_offset(u_id, node, &dev);
 			if (ret) {
 				debug("%s: could not find udevice for %s\n", __func__, conf);
 				continue;
diff --git a/common/spl/Kconfig b/common/spl/Kconfig
index 240543c9..bd9e39d6 100644
--- a/common/spl/Kconfig
+++ b/common/spl/Kconfig
@@ -929,6 +929,20 @@ config SPL_MTD
 	  devices. See SPL_NAND_SUPPORT and SPL_ONENAND_SUPPORT for how
 	  to enable specific MTD drivers.
 
+config SPL_MTD_LOAD
+	bool "Support loading from MTD framework"
+	depends on SPL_MTD
+	help
+	  Enable support for loading next stage, U-Boot or otherwise, from
+	  MTD Framework in U-Boot SPL.
+
+config SYS_MTD_U_BOOT_OFFS
+	hex "address of u-boot payload in MTD flash"
+	default 0x0
+	depends on SPL_MTD_LOAD
+	help
+	 Address within MTD Flash from where the u-boot payload is fetched.
+
 config SPL_MUSB_NEW
 	bool "Support new Mentor Graphics USB"
 	help
@@ -982,6 +996,12 @@ config SPL_NAND_IDENT
 	help
 	  SPL uses the chip ID list to identify the NAND flash.
 
+config SPL_NAND_SPI_SUPPORT
+	bool "Support loading from SPI NAND flash"
+	depends on SPL_MTD_LOAD
+	help
+	  Enable support for SPI NAND Flash in SPL.
+
 config SPL_UBI
 	bool "Support UBI"
 	help
diff --git a/common/spl/Makefile b/common/spl/Makefile
index 75123eb6..f095d0b1 100644
--- a/common/spl/Makefile
+++ b/common/spl/Makefile
@@ -34,6 +34,7 @@ obj-$(CONFIG_$(PHASE_)NVME) += spl_nvme.o
 obj-$(CONFIG_$(PHASE_)SEMIHOSTING) += spl_semihosting.o
 obj-$(CONFIG_$(PHASE_)DFU) += spl_dfu.o
 obj-$(CONFIG_$(PHASE_)SPI_LOAD) += spl_spi.o
+obj-$(CONFIG_$(PHASE_)MTD_LOAD) += spl_mtd.o
 obj-$(CONFIG_$(PHASE_)RAM_SUPPORT) += spl_ram.o
 obj-$(CONFIG_$(PHASE_)USB_SDP_SUPPORT) += spl_sdp.o
 endif
diff --git a/common/spl/spl_mtd.c b/common/spl/spl_mtd.c
new file mode 100644
index 00000000..7b9d6b33
--- /dev/null
+++ b/common/spl/spl_mtd.c
@@ -0,0 +1,73 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * FIT image loader using MTD read
+ *
+ * Copyright (C) 2018 Texas Instruments Incorporated - http://www.ti.com/
+ *	Apurva Nandan <a-nandan@ti.com>
+ */
+#include <config.h>
+#include <image.h>
+#include <log.h>
+#include <spl.h>
+#include <spl_load.h>
+#include <asm/io.h>
+#include <mtd.h>
+
+uint32_t __weak spl_mtd_get_uboot_offs(void)
+{
+	return CONFIG_SYS_MTD_U_BOOT_OFFS;
+}
+
+static ulong spl_mtd_read(struct spl_load_info *load, ulong offs, ulong size,
+			   void *dst)
+{
+	int err;
+	struct mtd_info *mtd = load->priv;
+	size_t ret_len;
+
+	debug("%s: offs %lx, size %lx, dst %p\n",
+	      __func__, offs, size, dst);
+
+	err = mtd_read(mtd, offs, size, &ret_len, dst);
+	if (err) {
+		printf("%s: error reading mtd, err - %d\n",
+		       __func__, err);
+		return 0;
+	}
+
+	if (ret_len != size) {
+		printf("%s: error reading mtd, ret_len != size\n",
+		       __func__);
+		return 0;
+	}
+
+	return size;
+}
+
+static int spl_mtd_load_image(struct spl_image_info *spl_image,
+			      struct spl_boot_device *bootdev)
+{
+	struct spl_load_info load;
+	struct mtd_info *mtd;
+
+	mtd_probe_devices();
+
+	switch (bootdev->boot_device) {
+	case BOOT_DEVICE_SPINAND:
+		mtd = get_mtd_device_nm("spi-nand0");
+		if (IS_ERR_OR_NULL(mtd)) {
+			printf("MTD device %s not found, ret %ld\n", "spi-nand",
+			       PTR_ERR(mtd));
+			return PTR_ERR(mtd);
+		}
+		break;
+	default:
+		puts("Unsupported MTD Boot Device!\n");
+		return -EINVAL;
+	}
+
+	spl_load_init(&load, spl_mtd_read, mtd, 1);
+	return spl_load(spl_image, bootdev, &load, 0, spl_mtd_get_uboot_offs());
+}
+
+SPL_LOAD_IMAGE_METHOD("SPINAND", 0, BOOT_DEVICE_SPINAND, spl_mtd_load_image);
diff --git a/drivers/mtd/Makefile b/drivers/mtd/Makefile
index ce05e206..a1f9a1dd 100644
--- a/drivers/mtd/Makefile
+++ b/drivers/mtd/Makefile
@@ -35,6 +35,7 @@ ifneq ($(mtd-y),)
 obj-$(CONFIG_SPL_MTD) += mtd.o
 endif
 obj-$(CONFIG_$(PHASE_)NAND_SUPPORT) += nand/
+obj-$(CONFIG_$(PHASE_)NAND_SPI_SUPPORT) += nand/
 obj-$(CONFIG_SPL_ONENAND_SUPPORT) += onenand/
 obj-$(CONFIG_$(PHASE_)SPI_FLASH_SUPPORT) += spi/
 obj-$(CONFIG_SPL_UBI) += ubispl/
diff --git a/drivers/mtd/nand/Makefile b/drivers/mtd/nand/Makefile
index c8169cf7..c6116f67 100644
--- a/drivers/mtd/nand/Makefile
+++ b/drivers/mtd/nand/Makefile
@@ -6,5 +6,7 @@ obj-$(CONFIG_MTD_NAND_CORE) += nandcore.o
 obj-$(CONFIG_MTD_RAW_NAND) += raw/
 obj-$(CONFIG_MTD_SPI_NAND) += spi/
 else
+nandcore-objs := core.o bbt.o
 obj-$(CONFIG_$(PHASE_)NAND_SUPPORT) += raw/
+obj-$(CONFIG_$(PHASE_)NAND_SPI_SUPPORT) += spi/ nandcore.o
 endif
diff --git a/drivers/mtd/nand/spi/Makefile b/drivers/mtd/nand/spi/Makefile
index 65b836b3..5c75e31f 100644
--- a/drivers/mtd/nand/spi/Makefile
+++ b/drivers/mtd/nand/spi/Makefile
@@ -2,4 +2,5 @@
 
 spinand-objs := core.o esmt.o gigadevice.o macronix.o micron.o paragon.o
 spinand-objs += toshiba.o winbond.o xtx.o
+obj-$(CONFIG_$(PHASE_)NAND_SPI_SUPPORT) += spinand.o
 obj-$(CONFIG_MTD_SPI_NAND) += spinand.o
diff --git a/drivers/mtd/nand/spi/core.c b/drivers/mtd/nand/spi/core.c
index f5ddfbf4..efe01759 100644
--- a/drivers/mtd/nand/spi/core.c
+++ b/drivers/mtd/nand/spi/core.c
@@ -373,7 +373,7 @@ static int spinand_write_to_cache_op(struct spinand_device *spinand,
 
 	spinand_cache_op_adjust_colum(spinand, &adjreq, &column);
 
-	op = *spinand->op_templates.write_cache;
+	op = *spinand->op_templates.update_cache;
 	op.addr.val = column;
 
 	/*
diff --git a/include/configs/rv1106_common.h b/include/configs/rv1106_common.h
index 72827bdb..76dec104 100644
--- a/include/configs/rv1106_common.h
+++ b/include/configs/rv1106_common.h
@@ -34,6 +34,14 @@
 	"kernel_addr_r=0x00010000\0"	\
 	"ramdisk_addr_r=0x000e00000\0"
 
+#if !defined(PARTS_DEFAULT)
+#define PARTS_DEFAULT
+#endif
+
+#if !defined(BOOT_TARGETS)
+#define BOOT_TARGETS
+#endif
+
 #define CFG_EXTRA_ENV_SETTINGS \
 	"fdtfile=" CONFIG_DEFAULT_FDT_FILE "\0" \
 	"partitions=" PARTS_DEFAULT \
